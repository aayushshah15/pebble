init 1
----

init_cp
----

queue
----

init 1
6: 1
----

init_cp
----

queue
----

init 1
6: 1000000
----

init_cp
----

queue
----

init 1
5: 1
6: 10
----

init_cp
----

queue
----
L5->L6: 1.0

init 1
5: 2
6: 10
----

init_cp
----

queue
----
L5->L6: 2.0

# Smoothing multiplier is
# `(size(Lbottom)/size(Lbase))^(Lbottom-Lbase) = (30/1)^(1/(6-4)) = 30^(1/2)`
#
# size(L4) = size(Lbase) = 1
# size(L5) = size(L4) * 30^(1/2) ~= 5
# size(L6) = size(L5) * 30^(1/2) = 30

init 1
5: 2
6: 30
----

init_cp
----

queue
----

init 1
4: 2
5: 2
6: 100
----

init_cp
----

queue
----
L4->L5: 2.0

init 1
4: 1
5: 2
6: 100
----

init_cp
----

queue
----
L4->L5: 1.0

init 1
4: 1
5: 11
6: 100
----

init_cp
----

queue
----
L5->L6: 1.1
L4->L5: 1.0

init 1
4: 2
5: 11
6: 100
----

init_cp
----

queue
----
L4->L5: 2.0
L5->L6: 1.1

init 1
0: 4
----

init_cp
----

queue
----
L0->L6: 1.0

init 1
0: 5
----

init_cp
----

queue
----
L0->L6: 1.2

init 1
0: 5
5: 2
6: 10
----

init_cp
----

queue
----
L5->L6: 2.0
L0->L5: 1.2

pick
----
L5->L6

pick
----
L0->L5

init_cp
----

pick
----
L5->L6

pick ongoing=(5,6)
----
no compaction

init 1
0: 10
4: 10
5: 6
6: 10
----

init_cp
----

queue
----
L4->L5: 10.0
L0->L4: 2.5
L5->L6: 2.0

pick ongoing=(5,6)
----
L0->L4

pick
----
L5->L6

init_cp
----

queue
----
L4->L5: 10.0
L0->L4: 2.5
L5->L6: 2.0

pick ongoing=(0,5)
----
no compaction

init 1
0: 10
6: 10
----

init_cp ongoing=(0,5)
----

queue
----
L0->L0: 2.5

pick
----
L0->L0

init_cp ongoing=(0,5)
----

queue
----
L0->L0: 2.5

pick ongoing=(0,5)
----
L0->L0

# Queue another intra-L0 compaction even if there is one already in
# progress.

init_cp ongoing=(0,0)
----

queue
----
L0->L0: 2.5

# We'll only pick a concurrent compaction if it is "high" priority
# (i.e. has a score >= 1.5).

init 1
0: 6
5: 1
6: 10
----

init_cp ongoing=(0,5)
----

queue
----
L0->L0: 1.5
L5->L6: 1.0

pick ongoing=(5,6)
----
L0->L0

pick ongoing=(5,6)
----
no compaction
